import sys
input = sys.stdin.readline

N = int(input())
A = list(map(int, input().split()))

# 초기 둘레 길이는 막대의 너비가 1이기 때문에, 막대의 개수의 2배
roundSize = N * 2

# 첫번째 막대와 마지막 막대의 높이를 둘레 길이에 추가
roundSize += A[0] + A[-1]

for idx in range(N-1):
	# 인접한 막대 사이의 길이 차이를 둘레 길이에 추가
	roundSize += abs(A[idx] - A[idx+1])

print(roundSize)

# 문제 내용 정리
# 막대 도형 문제는 단순하게 N개의 막대가 붙어있을 때, 생긴 도형의 둘레를 구하는 문제입니다.


# 문제 풀이
# 문제를 단순하게 생각을 했을 때, 우선 만들어진 막대 도형의 위 부분과 아래 부분은 막대의 개수와 동일합니다. 너비의 길이가 1이기 때문입니다.

# 하지만 높이의 길이를 구할 경우에는 막대의 높낮이가 달라지기 때문에, 단순하게 구할 수 없습니다. 모든 막대의 길이를 구하는 방법을 선택할 수 있지만 수학적인 접근을 통해서 해결할 수 있습니다. 하지만 당장 수학적인 접근이 어려울 경우에는 가정을 통해서 정답을 찾을 수 있습니다.

# A 막대의 길이가 5이고, B 막대의 길이가 7이라 가정합니다. A 막대와 B 막대가 붙어있는 부분에서, 길이가 2만큼 높이 차이가 납니다. 만약에 A 막대와 B 막대의 높이를 바꾸어도 길이가 2 만큼 높이 차이가 발생합니다. 차이가 발생한 만큼 도형의 둘레의 길이는 늘어납니다.

# 결론은 현재의 둘레 길이에, A 막대와 B 막대의 차이의 절댓값만큼 둘레가 추가가 됩니다. 단, 가장 처음과 마지막 막대의 길이는 막대의 높이 만큼 둘레에 추가 됩니다.


# Comment
# 풀이를 보고 문제를 해결하면, 어렵지 않게 해결할 수 있는 문제입니다. 하지만 풀이를 떠올리기 힘든 문제인 경우가 있어요. 그런 경우에는 직접 종이에 그림을 그려보시면서 해결 방법을 떠올려보는 것이 좋은 연습 방법입니다.

# 코딩 테스트를 진행할 때, 단순한 도형/수학 문제가 코딩 테스트 문제로 등장했을 때, 풀이가 생각이 바로 나지 않는다면, 익숙한 문제를 먼저 해결하면서, 1번 문제의 풀이를 생각하는 방법을 추천합니다. 단순한 문제에 시간을 오래 잡아먹히면 다른 문제를 풀 시간이 부족할 수 있습니다.

